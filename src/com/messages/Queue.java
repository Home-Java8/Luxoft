package com.messages;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * Created by alexandr on 17.06.15.
 * ********************************
 *
 * Здесь буду использовать паттерн "наблюдатель", который позволяет держать общий список рассылаемых сообщений.
 * А также состояние этого списка рассылаемых сообщений будет изменяться и "подписчиками" (получатели которые удаляют доставленные сообщения из списка) и "издателем" (который добавляет сообщения в список).
 */
public class Queue {

    private long sizeLimit;
    private long timeLimit;
    private Map<String, Message> messages;

    public Queue(){
        messages = new HashMap<String, Message>();
    }
    public Queue(long sizeLimit, long timeLimit){
        this.sizeLimit = sizeLimit;
        this.timeLimit = timeLimit;
        messages = new HashMap<String, Message>();
    }

    private Map<String, Message> sortQueue(Map<String, Message> messages){
        return messages;
    }

    /**
     * Этот метод имеет собственную логику на удаление элементов из списка:
     * - не факт что некоторые сообщения по разным причинам могут быть недоставлены к подписчикам...
     * - в процессе рассылки может сформироваться очень большой список рассылаемых сообщений из которых могут быть очень-важные сообщения и неважные сообщения...
     * - кроме этого, операция удаления сообщения из списка и уменьшение размера списка тоже является объемной (на ее выполнение тратиться тоже много времени)...
     * -- поэтому все сообщения внутри списка сортируются согласно приоритету...
     * -- а для уже удаленных сообщений - просто маркируется состояние флажка (и тоже сортируется согласно приоритету в списке)...
     * -- если за отведенный лимит времени, по какой-то причине, сообщение небудет доставлено получателю - такое сообщение маркируется как удаленное...
     * - и чтобы поминимуму нагружать такой список рассылаемых сообщений по таймеру с низкой периодичностью будет выполняться физическое удаление-очищение маркированных сообщений из списка и уменьшение размера списка (что-бы лишний раз незагромождать рессурсы JVM)...
     * @return
     */
    private long deleteMessage(){
        return 0;
    }

    /**
     * Этот метод имеет собственную логику на добавление элементов в список:
     * - элемент списка хранит ключ (который является адрессом получателя этой рассылки...)
     * - и сам объект-сообщения (который, кроме самого текста сообщения, еще несет уже внутри себя разную полезную информацию...)
     * - изначально, по умолчанию, создается минимальный размер списка.
     * - но в процессе рассылки-отправки сообщений, с добавлением новых объектов-сообщений этот размер списка будет увеличиваться
     * -- поскольку удаленые сообщения маркируются (чтобы повысить производительность они сразу неудаляются), будет присутствовать предварительная проверка на наличие таких сообщений и замена на новые-добавленые в список рассылки
     * @return
     */
    public boolean sentMessage(String address, Message message) throws SendException {
        return true;
    }
    public boolean sentMessage(String address, List<Message> message) throws SendException {
        return true;
    }

    public long getQueueCount(){
        return 0;
    }


    public long getSizeLimit(){
        return sizeLimit;
    }
    public long getTimeLimit(){
        return timeLimit;
    }
    public void setSizeLimit(long sizeLimit){
        this.sizeLimit = sizeLimit;
    }
    public void setTimeLimit(long timeLimit){
        this.timeLimit = timeLimit;
    }

}
